// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: axelar/axelarnet/v1beta1/gmp.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Metadata_Type int32

const (
	Unspecified         Metadata_Type = 0
	GeneralMsg          Metadata_Type = 1
	GeneralMsgWithToken Metadata_Type = 2
)

var Metadata_Type_name = map[int32]string{
	0: "TYPE_UNSPECIFIED",
	1: "TYPE_GENERAL_MESSAGE",
	2: "TYPE_GENERAL_MESSAGE_WITH_TOKEN",
}

var Metadata_Type_value = map[string]int32{
	"TYPE_UNSPECIFIED":                0,
	"TYPE_GENERAL_MESSAGE":            1,
	"TYPE_GENERAL_MESSAGE_WITH_TOKEN": 2,
}

func (x Metadata_Type) String() string {
	return proto.EnumName(Metadata_Type_name, int32(x))
}

func (Metadata_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_25d537f4eb568c53, []int{0, 0}
}

type Metadata struct {
	Sender      string        `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	SourceChain string        `protobuf:"bytes,2,opt,name=source_chain,json=sourceChain,proto3" json:"source_chain,omitempty"`
	Payload     []byte        `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	Type        Metadata_Type `protobuf:"varint,4,opt,name=type,proto3,enum=axelar.axelarnet.v1beta1.Metadata_Type" json:"type,omitempty"`
	DestChain   string        `protobuf:"bytes,5,opt,name=dest_chain,json=destChain,proto3" json:"dest_chain,omitempty"`
	DestAddress string        `protobuf:"bytes,6,opt,name=dest_address,json=destAddress,proto3" json:"dest_address,omitempty"`
}

func (m *Metadata) Reset()         { *m = Metadata{} }
func (m *Metadata) String() string { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()    {}
func (*Metadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_25d537f4eb568c53, []int{0}
}
func (m *Metadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Metadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Metadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Metadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metadata.Merge(m, src)
}
func (m *Metadata) XXX_Size() int {
	return m.Size()
}
func (m *Metadata) XXX_DiscardUnknown() {
	xxx_messageInfo_Metadata.DiscardUnknown(m)
}

var xxx_messageInfo_Metadata proto.InternalMessageInfo

func (m *Metadata) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *Metadata) GetSourceChain() string {
	if m != nil {
		return m.SourceChain
	}
	return ""
}

func (m *Metadata) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Metadata) GetType() Metadata_Type {
	if m != nil {
		return m.Type
	}
	return Unspecified
}

func (m *Metadata) GetDestChain() string {
	if m != nil {
		return m.DestChain
	}
	return ""
}

func (m *Metadata) GetDestAddress() string {
	if m != nil {
		return m.DestAddress
	}
	return ""
}

func init() {
	proto.RegisterEnum("axelar.axelarnet.v1beta1.Metadata_Type", Metadata_Type_name, Metadata_Type_value)
	proto.RegisterType((*Metadata)(nil), "axelar.axelarnet.v1beta1.Metadata")
}

func init() {
	proto.RegisterFile("axelar/axelarnet/v1beta1/gmp.proto", fileDescriptor_25d537f4eb568c53)
}

var fileDescriptor_25d537f4eb568c53 = []byte{
	// 424 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4a, 0xac, 0x48, 0xcd,
	0x49, 0x2c, 0xd2, 0x87, 0x50, 0x79, 0xa9, 0x25, 0xfa, 0x65, 0x86, 0x49, 0xa9, 0x25, 0x89, 0x86,
	0xfa, 0xe9, 0xb9, 0x05, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x12, 0x10, 0x49, 0x3d, 0xb8,
	0x1a, 0x3d, 0xa8, 0x1a, 0x29, 0x91, 0xf4, 0xfc, 0xf4, 0x7c, 0xb0, 0x22, 0x7d, 0x10, 0x0b, 0xa2,
	0x5e, 0xa9, 0x81, 0x99, 0x8b, 0xc3, 0x37, 0xb5, 0x24, 0x31, 0x25, 0xb1, 0x24, 0x51, 0x48, 0x8c,
	0x8b, 0xad, 0x38, 0x35, 0x2f, 0x25, 0xb5, 0x48, 0x82, 0x51, 0x81, 0x51, 0x83, 0x33, 0x08, 0xca,
	0x13, 0x52, 0xe4, 0xe2, 0x29, 0xce, 0x2f, 0x2d, 0x4a, 0x4e, 0x8d, 0x4f, 0xce, 0x48, 0xcc, 0xcc,
	0x93, 0x60, 0x02, 0xcb, 0x72, 0x43, 0xc4, 0x9c, 0x41, 0x42, 0x42, 0x12, 0x5c, 0xec, 0x05, 0x89,
	0x95, 0x39, 0xf9, 0x89, 0x29, 0x12, 0xcc, 0x0a, 0x8c, 0x1a, 0x3c, 0x41, 0x30, 0xae, 0x90, 0x35,
	0x17, 0x4b, 0x49, 0x65, 0x41, 0xaa, 0x04, 0x8b, 0x02, 0xa3, 0x06, 0x9f, 0x91, 0xba, 0x1e, 0x2e,
	0x07, 0xea, 0xc1, 0x9c, 0xa1, 0x17, 0x52, 0x59, 0x90, 0x1a, 0x04, 0xd6, 0x24, 0x24, 0xcb, 0xc5,
	0x95, 0x92, 0x5a, 0x5c, 0x02, 0xb5, 0x97, 0x15, 0x6c, 0x2f, 0x27, 0x48, 0x04, 0x62, 0xab, 0x22,
	0x17, 0x0f, 0x58, 0x3a, 0x31, 0x25, 0xa5, 0x28, 0xb5, 0xb8, 0x58, 0x82, 0x0d, 0xe2, 0x30, 0x90,
	0x98, 0x23, 0x44, 0x48, 0x69, 0x3e, 0x23, 0x17, 0x0b, 0xc8, 0x40, 0x21, 0x55, 0x2e, 0x81, 0x90,
	0xc8, 0x00, 0xd7, 0xf8, 0x50, 0xbf, 0xe0, 0x00, 0x57, 0x67, 0x4f, 0x37, 0x4f, 0x57, 0x17, 0x01,
	0x06, 0x29, 0xfe, 0xae, 0xb9, 0x0a, 0xdc, 0xa1, 0x79, 0xc5, 0x05, 0xa9, 0xc9, 0x99, 0x69, 0x99,
	0xa9, 0x29, 0x42, 0x1a, 0x5c, 0x22, 0x60, 0x65, 0xee, 0xae, 0x7e, 0xae, 0x41, 0x8e, 0x3e, 0xf1,
	0xbe, 0xae, 0xc1, 0xc1, 0x8e, 0xee, 0xae, 0x02, 0x8c, 0x52, 0x7c, 0x5d, 0x73, 0x15, 0xb8, 0xdc,
	0x53, 0xf3, 0x52, 0x8b, 0x12, 0x73, 0x7c, 0x8b, 0xd3, 0x85, 0x6c, 0xb8, 0xe4, 0xb1, 0xa9, 0x8c,
	0x0f, 0xf7, 0x0c, 0xf1, 0x88, 0x0f, 0xf1, 0xf7, 0x76, 0xf5, 0x13, 0x60, 0x92, 0x12, 0xef, 0x9a,
	0xab, 0x20, 0x8c, 0xd0, 0x14, 0x9e, 0x59, 0x92, 0x11, 0x92, 0x9f, 0x9d, 0x9a, 0x27, 0xc5, 0xd1,
	0xb1, 0x58, 0x8e, 0x61, 0xc5, 0x12, 0x39, 0x46, 0xa7, 0x80, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c,
	0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc2, 0x63, 0x39, 0x86, 0x0b, 0x8f, 0xe5, 0x18, 0x6e,
	0x3c, 0x96, 0x63, 0x88, 0x32, 0x4b, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0x45,
	0x44, 0x7a, 0x79, 0x7e, 0x51, 0x36, 0x94, 0xa7, 0x9b, 0x9c, 0x5f, 0x94, 0xaa, 0x5f, 0x81, 0x94,
	0x20, 0x40, 0x81, 0x56, 0x9c, 0xc4, 0x06, 0x8e, 0x5b, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xce, 0xa8, 0x94, 0xe3, 0x31, 0x02, 0x00, 0x00,
}

func (m *Metadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Metadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Metadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DestAddress) > 0 {
		i -= len(m.DestAddress)
		copy(dAtA[i:], m.DestAddress)
		i = encodeVarintGmp(dAtA, i, uint64(len(m.DestAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.DestChain) > 0 {
		i -= len(m.DestChain)
		copy(dAtA[i:], m.DestChain)
		i = encodeVarintGmp(dAtA, i, uint64(len(m.DestChain)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Type != 0 {
		i = encodeVarintGmp(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintGmp(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SourceChain) > 0 {
		i -= len(m.SourceChain)
		copy(dAtA[i:], m.SourceChain)
		i = encodeVarintGmp(dAtA, i, uint64(len(m.SourceChain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintGmp(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGmp(dAtA []byte, offset int, v uint64) int {
	offset -= sovGmp(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Metadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovGmp(uint64(l))
	}
	l = len(m.SourceChain)
	if l > 0 {
		n += 1 + l + sovGmp(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovGmp(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovGmp(uint64(m.Type))
	}
	l = len(m.DestChain)
	if l > 0 {
		n += 1 + l + sovGmp(uint64(l))
	}
	l = len(m.DestAddress)
	if l > 0 {
		n += 1 + l + sovGmp(uint64(l))
	}
	return n
}

func sovGmp(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGmp(x uint64) (n int) {
	return sovGmp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Metadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGmp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGmp
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Metadata_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGmp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGmp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGmp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGmp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGmp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGmp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGmp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGmp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGmp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGmp
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGmp
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGmp
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGmp        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGmp          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGmp = fmt.Errorf("proto: unexpected end of group")
)
