{
  "address": "0x6c2f2AdeeD64A3226de98aa8487409C55E1eF0A7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "gateway_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "gasReceiver_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotApprovedByGateway",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "destinationChain",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "destinationContract",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "SendMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "destinationChain",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "destinationContract",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "SendMessageWithToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commandId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "sourceChain",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "sourceAddress",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commandId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "sourceChain",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "sourceAddress",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "payload",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "tokenSymbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "executeWithToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasReceiver",
      "outputs": [
        {
          "internalType": "contract IAxelarGasService",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gateway",
      "outputs": [
        {
          "internalType": "contract IAxelarGateway",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xdbcc33714a8f069aacaccb6ed5faa8931e2082e6ae7dfbbaf182c9d72a8f4ff0",
  "receipt": {
    "to": null,
    "from": "0x3552C6ff4a091ED6f51dF52fcD3e6e7682C57fCF",
    "contractAddress": "0x6c2f2AdeeD64A3226de98aa8487409C55E1eF0A7",
    "transactionIndex": 10,
    "gasUsed": "901493",
    "logsBloom": "0x
    "blockHash": "0x2134036792cc86c43094e0beb731d3eea6d0c69ce9ebaea0826cefd702aa3061",
    "transactionHash": "0xdbcc33714a8f069aacaccb6ed5faa8931e2082e6ae7dfbbaf182c9d72a8f4ff0",
    "logs": [],
    "blockNumber": 28003974,
    "cumulativeGasUsed": "3932735",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4D147dCb984e6affEEC47e44293DA442580A3Ec0",
    "0xbE406F0189A0B4cf3A05C286473D23791Dd44Cc6"
  ],
  "numDeployments": 1,
  "solcInputHash": "cdc53571ea3863e7f55d98b9d8a6c5c9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gateway_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gasReceiver_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotApprovedByGateway\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"destinationChain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"destinationContract\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"SendMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"destinationChain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"destinationContract\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendMessageWithToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commandId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"sourceChain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sourceAddress\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commandId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"sourceChain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sourceAddress\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"executeWithToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasReceiver\",\"outputs\":[{\"internalType\":\"contract IAxelarGasService\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gateway\",\"outputs\":[{\"internalType\":\"contract IAxelarGateway\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MessageSender.sol\":\"MessageSender\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@axelar-network/axelar-gmp-sdk-solidity/contracts/executables/AxelarExecutable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IAxelarGateway } from '../interfaces/IAxelarGateway.sol';\\nimport { IAxelarExecutable } from '../interfaces/IAxelarExecutable.sol';\\n\\ncontract AxelarExecutable is IAxelarExecutable {\\n    IAxelarGateway public immutable gateway;\\n\\n    constructor(address gateway_) {\\n        if (gateway_ == address(0)) revert InvalidAddress();\\n\\n        gateway = IAxelarGateway(gateway_);\\n    }\\n\\n    function execute(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload\\n    ) external override {\\n        bytes32 payloadHash = keccak256(payload);\\n        if (!gateway.validateContractCall(commandId, sourceChain, sourceAddress, payloadHash))\\n            revert NotApprovedByGateway();\\n        _execute(sourceChain, sourceAddress, payload);\\n    }\\n\\n    function executeWithToken(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload,\\n        string calldata tokenSymbol,\\n        uint256 amount\\n    ) external override {\\n        bytes32 payloadHash = keccak256(payload);\\n        if (\\n            !gateway.validateContractCallAndMint(\\n                commandId,\\n                sourceChain,\\n                sourceAddress,\\n                payloadHash,\\n                tokenSymbol,\\n                amount\\n            )\\n        ) revert NotApprovedByGateway();\\n\\n        _executeWithToken(sourceChain, sourceAddress, payload, tokenSymbol, amount);\\n    }\\n\\n    function _execute(\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload\\n    ) internal virtual {}\\n\\n    function _executeWithToken(\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload,\\n        string calldata tokenSymbol,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x37f5cbdc641ca8f0dc24991af6038d4db55b0740f4383fbd4c443bd2a98abb95\",\"license\":\"MIT\"},\"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarExecutable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IAxelarGateway } from '../interfaces/IAxelarGateway.sol';\\n\\ninterface IAxelarExecutable {\\n    error InvalidAddress();\\n    error NotApprovedByGateway();\\n\\n    function gateway() external view returns (IAxelarGateway);\\n\\n    function execute(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload\\n    ) external;\\n\\n    function executeWithToken(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload,\\n        string calldata tokenSymbol,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x7175f7bfe798e46032ad40bd87666c6ef3f03c0397c875cf3465510a9fc75237\",\"license\":\"MIT\"},\"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarGasService.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// This should be owned by the microservice that is paying for gas.\\ninterface IAxelarGasService {\\n    error NothingReceived();\\n    error TransferFailed();\\n    error InvalidAddress();\\n\\n    event GasPaidForContractCall(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event GasPaidForContractCallWithToken(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        string symbol,\\n        uint256 amount,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event NativeGasPaidForContractCall(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event NativeGasPaidForContractCallWithToken(\\n        address indexed sourceAddress,\\n        string destinationChain,\\n        string destinationAddress,\\n        bytes32 indexed payloadHash,\\n        string symbol,\\n        uint256 amount,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event GasAdded(\\n        bytes32 indexed txHash,\\n        uint256 indexed logIndex,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    );\\n\\n    event NativeGasAdded(bytes32 indexed txHash, uint256 indexed logIndex, uint256 gasFeeAmount, address refundAddress);\\n\\n    // This is called on the source chain before calling the gateway to execute a remote contract.\\n    function payGasForContractCall(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    ) external;\\n\\n    // This is called on the source chain before calling the gateway to execute a remote contract.\\n    function payGasForContractCallWithToken(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        string calldata symbol,\\n        uint256 amount,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    ) external;\\n\\n    // This is called on the source chain before calling the gateway to execute a remote contract.\\n    function payNativeGasForContractCall(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        address refundAddress\\n    ) external payable;\\n\\n    // This is called on the source chain before calling the gateway to execute a remote contract.\\n    function payNativeGasForContractCallWithToken(\\n        address sender,\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        bytes calldata payload,\\n        string calldata symbol,\\n        uint256 amount,\\n        address refundAddress\\n    ) external payable;\\n\\n    function addGas(\\n        bytes32 txHash,\\n        uint256 txIndex,\\n        address gasToken,\\n        uint256 gasFeeAmount,\\n        address refundAddress\\n    ) external;\\n\\n    function addNativeGas(\\n        bytes32 txHash,\\n        uint256 logIndex,\\n        address refundAddress\\n    ) external payable;\\n\\n    function collectFees(address payable receiver, address[] calldata tokens) external;\\n\\n    function refund(\\n        address payable receiver,\\n        address token,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0ab1f104fcf57de6a8fef1a6526bda7b362f9bfc6c05e0c5c768444d6cff6f5f\",\"license\":\"MIT\"},\"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IAxelarGateway {\\n    /**********\\\\\\n    |* Errors *|\\n    \\\\**********/\\n\\n    error NotSelf();\\n    error NotProxy();\\n    error InvalidCodeHash();\\n    error SetupFailed();\\n    error InvalidAuthModule();\\n    error InvalidTokenDeployer();\\n    error InvalidAmount();\\n    error InvalidChainId();\\n    error InvalidCommands();\\n    error TokenDoesNotExist(string symbol);\\n    error TokenAlreadyExists(string symbol);\\n    error TokenDeployFailed(string symbol);\\n    error TokenContractDoesNotExist(address token);\\n    error BurnFailed(string symbol);\\n    error MintFailed(string symbol);\\n    error InvalidSetMintLimitsParams();\\n    error ExceedMintLimit(string symbol);\\n\\n    /**********\\\\\\n    |* Events *|\\n    \\\\**********/\\n\\n    event TokenSent(\\n        address indexed sender,\\n        string destinationChain,\\n        string destinationAddress,\\n        string symbol,\\n        uint256 amount\\n    );\\n\\n    event ContractCall(\\n        address indexed sender,\\n        string destinationChain,\\n        string destinationContractAddress,\\n        bytes32 indexed payloadHash,\\n        bytes payload\\n    );\\n\\n    event ContractCallWithToken(\\n        address indexed sender,\\n        string destinationChain,\\n        string destinationContractAddress,\\n        bytes32 indexed payloadHash,\\n        bytes payload,\\n        string symbol,\\n        uint256 amount\\n    );\\n\\n    event Executed(bytes32 indexed commandId);\\n\\n    event TokenDeployed(string symbol, address tokenAddresses);\\n\\n    event ContractCallApproved(\\n        bytes32 indexed commandId,\\n        string sourceChain,\\n        string sourceAddress,\\n        address indexed contractAddress,\\n        bytes32 indexed payloadHash,\\n        bytes32 sourceTxHash,\\n        uint256 sourceEventIndex\\n    );\\n\\n    event ContractCallApprovedWithMint(\\n        bytes32 indexed commandId,\\n        string sourceChain,\\n        string sourceAddress,\\n        address indexed contractAddress,\\n        bytes32 indexed payloadHash,\\n        string symbol,\\n        uint256 amount,\\n        bytes32 sourceTxHash,\\n        uint256 sourceEventIndex\\n    );\\n\\n    event TokenMintLimitUpdated(string symbol, uint256 limit);\\n\\n    event OperatorshipTransferred(bytes newOperatorsData);\\n\\n    event Upgraded(address indexed implementation);\\n\\n    /********************\\\\\\n    |* Public Functions *|\\n    \\\\********************/\\n\\n    function sendToken(\\n        string calldata destinationChain,\\n        string calldata destinationAddress,\\n        string calldata symbol,\\n        uint256 amount\\n    ) external;\\n\\n    function callContract(\\n        string calldata destinationChain,\\n        string calldata contractAddress,\\n        bytes calldata payload\\n    ) external;\\n\\n    function callContractWithToken(\\n        string calldata destinationChain,\\n        string calldata contractAddress,\\n        bytes calldata payload,\\n        string calldata symbol,\\n        uint256 amount\\n    ) external;\\n\\n    function isContractCallApproved(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        address contractAddress,\\n        bytes32 payloadHash\\n    ) external view returns (bool);\\n\\n    function isContractCallAndMintApproved(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        address contractAddress,\\n        bytes32 payloadHash,\\n        string calldata symbol,\\n        uint256 amount\\n    ) external view returns (bool);\\n\\n    function validateContractCall(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes32 payloadHash\\n    ) external returns (bool);\\n\\n    function validateContractCallAndMint(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes32 payloadHash,\\n        string calldata symbol,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /***********\\\\\\n    |* Getters *|\\n    \\\\***********/\\n\\n    function authModule() external view returns (address);\\n\\n    function tokenDeployer() external view returns (address);\\n\\n    function tokenMintLimit(string memory symbol) external view returns (uint256);\\n\\n    function tokenMintAmount(string memory symbol) external view returns (uint256);\\n\\n    function allTokensFrozen() external view returns (bool);\\n\\n    function implementation() external view returns (address);\\n\\n    function tokenAddresses(string memory symbol) external view returns (address);\\n\\n    function tokenFrozen(string memory symbol) external view returns (bool);\\n\\n    function isCommandExecuted(bytes32 commandId) external view returns (bool);\\n\\n    function adminEpoch() external view returns (uint256);\\n\\n    function adminThreshold(uint256 epoch) external view returns (uint256);\\n\\n    function admins(uint256 epoch) external view returns (address[] memory);\\n\\n    /*******************\\\\\\n    |* Admin Functions *|\\n    \\\\*******************/\\n\\n    function setTokenMintLimits(string[] calldata symbols, uint256[] calldata limits) external;\\n\\n    function upgrade(\\n        address newImplementation,\\n        bytes32 newImplementationCodeHash,\\n        bytes calldata setupParams\\n    ) external;\\n\\n    /**********************\\\\\\n    |* External Functions *|\\n    \\\\**********************/\\n\\n    function setup(bytes calldata params) external;\\n\\n    function execute(bytes calldata input) external;\\n}\\n\",\"keccak256\":\"0xae3d4598622e927639e3cba383618476562631bc8afafe68b16dfbd1db21fd78\",\"license\":\"MIT\"},\"@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    error InvalidAccount();\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xb77ad755f4eade679279d5ca12b6926595e41e17387e143530f4fb57672d58d7\",\"license\":\"MIT\"},\"contracts/MessageSender.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport { AxelarExecutable } from '@axelar-network/axelar-gmp-sdk-solidity/contracts/executables/AxelarExecutable.sol';\\nimport { IAxelarGateway } from '@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarGateway.sol';\\nimport { IERC20 } from '@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IERC20.sol';\\nimport { IAxelarGasService } from '@axelar-network/axelar-gmp-sdk-solidity/contracts/interfaces/IAxelarGasService.sol';\\n\\ncontract MessageSender is AxelarExecutable {\\n    IAxelarGasService public immutable gasReceiver;\\n\\n    // The gateway contract address and gas receiver contract address should be taken from\\n    // https://docs.axelar.dev/resources/testnet#evm-contract-addresses\\n    // Ex Gateway on BSC: 0x4D147dCb984e6affEEC47e44293DA442580A3Ec0\\n    constructor(address gateway_, address gasReceiver_) AxelarExecutable(gateway_) {\\n        gasReceiver = IAxelarGasService(gasReceiver_);\\n    }\\n\\n    function SendMessage(\\n        string memory destinationChain, \\n        string memory destinationContract, \\n        string memory message\\n    ) external {\\n        // Define the payload to cosmwasm,\\n        bytes memory payload  = abi.encode(\\n            \\\"receive_message\\\", // method name\\n            \\\"message\\\", // argument name\\n            \\\"string\\\", // argument type\\n            message // argument value\\n        );\\n\\n        // Encode the payload to cosmwasm\\n        bytes memory payloadToCW = abi.encode(\\n            bytes32(uint256(1)), // verison number\\n            payload\\n        );\\n\\n        // Is this neccessary?\\n        // In yes, how many gas should be sent? Is that the reason why this fuction is payable?\\n        // In no, who pays the gas in the destination chain?\\n        gasReceiver.payNativeGasForContractCall(\\n            address(this),\\n            destinationChain,\\n            destinationContract,\\n            payloadToCW,\\n            msg.sender\\n        );\\n\\n        gateway.callContract(destinationChain, destinationContract, payloadToCW);\\n    }\\n\\n    function SendMessageWithToken(\\n        string memory destinationChain, \\n        string memory destinationContract, \\n        string memory message,\\n        string memory symbol,\\n        uint256 amount\\n    ) external payable {\\n        // Send token to this contract then let Gateway to transfer it to the destination chain\\n        address tokenAddress = gateway.tokenAddresses(symbol);\\n        IERC20(tokenAddress).transferFrom(msg.sender, address(this), amount);\\n        IERC20(tokenAddress).approve(address(gateway), amount);\\n\\n        // Define the payload to cosmwasm\\n        bytes memory payload  = abi.encode(\\n            \\\"receive_message_with_token\\\", // method name\\n            \\\"message\\\", // argument name\\n            \\\"string\\\", // argument type\\n            message // argument value\\n        );\\n\\n        // Encode the payload to cosmwasm\\n        bytes memory payloadToCW = abi.encode(\\n            bytes32(uint256(1)), // verison number\\n            payload\\n        );\\n\\n        // Is this neccessary?\\n        // In yes, how many gas should be sent? Is that the reason why this fuction is payable?\\n        // In no, who pays the gas in the destination chain?\\n        if (msg.value > 0) {\\n            gasReceiver.payNativeGasForContractCallWithToken{value: msg.value}(\\n                address(this), \\n                destinationChain, \\n                destinationContract, \\n                payloadToCW, \\n                symbol, \\n                amount, \\n                msg.sender);\\n        }\\n\\n        gateway.callContractWithToken(destinationChain, destinationContract, payloadToCW, symbol, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x53c91ae519c5bbac6e054415ef54967c9ef2deeae8c6797310de137a001d4924\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b5060405161106e38038061106e83398101604081905261002f9161008b565b816001600160a01b0381166100575760405163e6c4247b60e01b815260040160405180910390fd5b6001600160a01b039081166080521660a052506100be565b80516001600160a01b038116811461008657600080fd5b919050565b6000806040838503121561009e57600080fd5b6100a78361006f565b91506100b56020840161006f565b90509250929050565b60805160a051610f5461011a6000396000818161011e015281816102970152610671015260008181606c015281816101840152818161031b015281816103c0015281816104830152818161058b01526106fe0152610f546000f3fe6080604052600436106100555760003560e01c8063116191b61461005a5780631a98b2e0146100aa5780631fc6e5c3146100cc57806349160658146100ec57806380d14b4a1461010c578063f69ad79814610140575b600080fd5b34801561006657600080fd5b5061008e7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b3480156100b657600080fd5b506100ca6100c53660046107c0565b610153565b005b3480156100d857600080fd5b506100ca6100e736600461093d565b610236565b3480156100f857600080fd5b506100ca6101073660046109c5565b61038f565b34801561011857600080fd5b5061008e7f000000000000000000000000000000000000000000000000000000000000000081565b6100ca61014e366004610a69565b610469565b60008585604051610165929190610b1e565b604051908190038120631876eed960e01b825291506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631876eed9906101c9908e908e908e908e908e9089908d908d908d90600401610b57565b6020604051808303816000875af11580156101e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020c9190610bb6565b61022957604051631403112d60e21b815260040160405180910390fd5b5050505050505050505050565b6000816040516020016102499190610c25565b60408051601f19818403018152908290529150600090610270906001908490602001610cb3565b60408051601f1981840301815290829052630c93e3bb60e01b825291506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690630c93e3bb906102d49030908990899087903390600401610ccc565b600060405180830381600087803b1580156102ee57600080fd5b505af1158015610302573d6000803e3d6000fd5b5050604051631c92115f60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169250631c92115f915061035690889088908690600401610d2a565b600060405180830381600087803b15801561037057600080fd5b505af1158015610384573d6000803e3d6000fd5b505050505050505050565b600082826040516103a1929190610b1e565b604051908190038120635f6970c360e01b825291506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635f6970c3906103ff908b908b908b908b908b908990600401610d6d565b6020604051808303816000875af115801561041e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104429190610bb6565b61045f57604051631403112d60e21b815260040160405180910390fd5b5050505050505050565b6040516349ad89fb60e11b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063935b13f6906104b8908690600401610dae565b602060405180830381865afa1580156104d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f99190610dc1565b6040516323b872dd60e01b8152336004820152306024820152604481018490529091506001600160a01b038216906323b872dd906064016020604051808303816000875af115801561054f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105739190610bb6565b5060405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820184905282169063095ea7b3906044016020604051808303816000875af11580156105e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106079190610bb6565b5060008460405160200161061b9190610dea565b60408051601f19818403018152908290529150600090610642906001908490602001610cb3565b60408051601f19818403018152919052905034156106e757604051636316100160e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c62c20029034906106b49030908d908d9088908d908d903390600401610e45565b6000604051808303818588803b1580156106cd57600080fd5b505af11580156106e1573d6000803e3d6000fd5b50505050505b604051632d505c2160e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063b54170849061073b908b908b9086908b908b90600401610ebe565b600060405180830381600087803b15801561075557600080fd5b505af1158015610769573d6000803e3d6000fd5b505050505050505050505050565b60008083601f84011261078957600080fd5b50813567ffffffffffffffff8111156107a157600080fd5b6020830191508360208285010111156107b957600080fd5b9250929050565b60008060008060008060008060008060c08b8d0312156107df57600080fd5b8a35995060208b013567ffffffffffffffff808211156107fe57600080fd5b61080a8e838f01610777565b909b50995060408d013591508082111561082357600080fd5b61082f8e838f01610777565b909950975060608d013591508082111561084857600080fd5b6108548e838f01610777565b909750955060808d013591508082111561086d57600080fd5b5061087a8d828e01610777565b9150809450508092505060a08b013590509295989b9194979a5092959850565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126108c157600080fd5b813567ffffffffffffffff808211156108dc576108dc61089a565b604051601f8301601f19908116603f011681019082821181831017156109045761090461089a565b8160405283815286602085880101111561091d57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121561095257600080fd5b833567ffffffffffffffff8082111561096a57600080fd5b610976878388016108b0565b9450602086013591508082111561098c57600080fd5b610998878388016108b0565b935060408601359150808211156109ae57600080fd5b506109bb868287016108b0565b9150509250925092565b60008060008060008060006080888a0312156109e057600080fd5b87359650602088013567ffffffffffffffff808211156109ff57600080fd5b610a0b8b838c01610777565b909850965060408a0135915080821115610a2457600080fd5b610a308b838c01610777565b909650945060608a0135915080821115610a4957600080fd5b50610a568a828b01610777565b989b979a50959850939692959293505050565b600080600080600060a08688031215610a8157600080fd5b853567ffffffffffffffff80821115610a9957600080fd5b610aa589838a016108b0565b96506020880135915080821115610abb57600080fd5b610ac789838a016108b0565b95506040880135915080821115610add57600080fd5b610ae989838a016108b0565b94506060880135915080821115610aff57600080fd5b50610b0c888289016108b0565b95989497509295608001359392505050565b8183823760009101908152919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b89815260c060208201526000610b7160c083018a8c610b2e565b8281036040840152610b8481898b610b2e565b90508660608401528281036080840152610b9f818688610b2e565b9150508260a08301529a9950505050505050505050565b600060208284031215610bc857600080fd5b81518015158114610bd857600080fd5b9392505050565b6000815180845260005b81811015610c0557602081850181015186830182015201610be9565b506000602082860101526020601f19601f83011685010191505092915050565b60808152600f60808201526e726563656976655f6d65737361676560881b60a082015260c060208201526000610c7260c0830160078152666d65737361676560c81b602082015260400190565b8281036040840152610c97816006815265737472696e6760d01b602082015260400190565b90508281036060840152610cab8185610bdf565b949350505050565b828152604060208201526000610cab6040830184610bdf565b600060018060a01b03808816835260a06020840152610cee60a0840188610bdf565b8381036040850152610d008188610bdf565b90508381036060850152610d148187610bdf565b9250508084166080840152509695505050505050565b606081526000610d3d6060830186610bdf565b8281036020840152610d4f8186610bdf565b90508281036040840152610d638185610bdf565b9695505050505050565b868152608060208201526000610d87608083018789610b2e565b8281036040840152610d9a818688610b2e565b915050826060830152979650505050505050565b602081526000610bd86020830184610bdf565b600060208284031215610dd357600080fd5b81516001600160a01b0381168114610bd857600080fd5b60808152601a60808201527f726563656976655f6d6573736167655f776974685f746f6b656e00000000000060a082015260c060208201526000610c7260c0830160078152666d65737361676560c81b602082015260400190565b600060018060a01b03808a16835260e06020840152610e6760e084018a610bdf565b8381036040850152610e79818a610bdf565b90508381036060850152610e8d8189610bdf565b90508381036080850152610ea18188610bdf565b60a0850196909652509290921660c0909101525095945050505050565b60a081526000610ed160a0830188610bdf565b8281036020840152610ee38188610bdf565b90508281036040840152610ef78187610bdf565b90508281036060840152610f0b8186610bdf565b915050826080830152969550505050505056fea2646970667358221220056dfa9d01e0c29431c36496fb576c297dec49192378238d6241c301b6c01a6064736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100555760003560e01c8063116191b61461005a5780631a98b2e0146100aa5780631fc6e5c3146100cc57806349160658146100ec57806380d14b4a1461010c578063f69ad79814610140575b600080fd5b34801561006657600080fd5b5061008e7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b3480156100b657600080fd5b506100ca6100c53660046107c0565b610153565b005b3480156100d857600080fd5b506100ca6100e736600461093d565b610236565b3480156100f857600080fd5b506100ca6101073660046109c5565b61038f565b34801561011857600080fd5b5061008e7f000000000000000000000000000000000000000000000000000000000000000081565b6100ca61014e366004610a69565b610469565b60008585604051610165929190610b1e565b604051908190038120631876eed960e01b825291506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631876eed9906101c9908e908e908e908e908e9089908d908d908d90600401610b57565b6020604051808303816000875af11580156101e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020c9190610bb6565b61022957604051631403112d60e21b815260040160405180910390fd5b5050505050505050505050565b6000816040516020016102499190610c25565b60408051601f19818403018152908290529150600090610270906001908490602001610cb3565b60408051601f1981840301815290829052630c93e3bb60e01b825291506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690630c93e3bb906102d49030908990899087903390600401610ccc565b600060405180830381600087803b1580156102ee57600080fd5b505af1158015610302573d6000803e3d6000fd5b5050604051631c92115f60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169250631c92115f915061035690889088908690600401610d2a565b600060405180830381600087803b15801561037057600080fd5b505af1158015610384573d6000803e3d6000fd5b505050505050505050565b600082826040516103a1929190610b1e565b604051908190038120635f6970c360e01b825291506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635f6970c3906103ff908b908b908b908b908b908990600401610d6d565b6020604051808303816000875af115801561041e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104429190610bb6565b61045f57604051631403112d60e21b815260040160405180910390fd5b5050505050505050565b6040516349ad89fb60e11b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063935b13f6906104b8908690600401610dae565b602060405180830381865afa1580156104d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f99190610dc1565b6040516323b872dd60e01b8152336004820152306024820152604481018490529091506001600160a01b038216906323b872dd906064016020604051808303816000875af115801561054f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105739190610bb6565b5060405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820184905282169063095ea7b3906044016020604051808303816000875af11580156105e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106079190610bb6565b5060008460405160200161061b9190610dea565b60408051601f19818403018152908290529150600090610642906001908490602001610cb3565b60408051601f19818403018152919052905034156106e757604051636316100160e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c62c20029034906106b49030908d908d9088908d908d903390600401610e45565b6000604051808303818588803b1580156106cd57600080fd5b505af11580156106e1573d6000803e3d6000fd5b50505050505b604051632d505c2160e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063b54170849061073b908b908b9086908b908b90600401610ebe565b600060405180830381600087803b15801561075557600080fd5b505af1158015610769573d6000803e3d6000fd5b505050505050505050505050565b60008083601f84011261078957600080fd5b50813567ffffffffffffffff8111156107a157600080fd5b6020830191508360208285010111156107b957600080fd5b9250929050565b60008060008060008060008060008060c08b8d0312156107df57600080fd5b8a35995060208b013567ffffffffffffffff808211156107fe57600080fd5b61080a8e838f01610777565b909b50995060408d013591508082111561082357600080fd5b61082f8e838f01610777565b909950975060608d013591508082111561084857600080fd5b6108548e838f01610777565b909750955060808d013591508082111561086d57600080fd5b5061087a8d828e01610777565b9150809450508092505060a08b013590509295989b9194979a5092959850565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126108c157600080fd5b813567ffffffffffffffff808211156108dc576108dc61089a565b604051601f8301601f19908116603f011681019082821181831017156109045761090461089a565b8160405283815286602085880101111561091d57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121561095257600080fd5b833567ffffffffffffffff8082111561096a57600080fd5b610976878388016108b0565b9450602086013591508082111561098c57600080fd5b610998878388016108b0565b935060408601359150808211156109ae57600080fd5b506109bb868287016108b0565b9150509250925092565b60008060008060008060006080888a0312156109e057600080fd5b87359650602088013567ffffffffffffffff808211156109ff57600080fd5b610a0b8b838c01610777565b909850965060408a0135915080821115610a2457600080fd5b610a308b838c01610777565b909650945060608a0135915080821115610a4957600080fd5b50610a568a828b01610777565b989b979a50959850939692959293505050565b600080600080600060a08688031215610a8157600080fd5b853567ffffffffffffffff80821115610a9957600080fd5b610aa589838a016108b0565b96506020880135915080821115610abb57600080fd5b610ac789838a016108b0565b95506040880135915080821115610add57600080fd5b610ae989838a016108b0565b94506060880135915080821115610aff57600080fd5b50610b0c888289016108b0565b95989497509295608001359392505050565b8183823760009101908152919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b89815260c060208201526000610b7160c083018a8c610b2e565b8281036040840152610b8481898b610b2e565b90508660608401528281036080840152610b9f818688610b2e565b9150508260a08301529a9950505050505050505050565b600060208284031215610bc857600080fd5b81518015158114610bd857600080fd5b9392505050565b6000815180845260005b81811015610c0557602081850181015186830182015201610be9565b506000602082860101526020601f19601f83011685010191505092915050565b60808152600f60808201526e726563656976655f6d65737361676560881b60a082015260c060208201526000610c7260c0830160078152666d65737361676560c81b602082015260400190565b8281036040840152610c97816006815265737472696e6760d01b602082015260400190565b90508281036060840152610cab8185610bdf565b949350505050565b828152604060208201526000610cab6040830184610bdf565b600060018060a01b03808816835260a06020840152610cee60a0840188610bdf565b8381036040850152610d008188610bdf565b90508381036060850152610d148187610bdf565b9250508084166080840152509695505050505050565b606081526000610d3d6060830186610bdf565b8281036020840152610d4f8186610bdf565b90508281036040840152610d638185610bdf565b9695505050505050565b868152608060208201526000610d87608083018789610b2e565b8281036040840152610d9a818688610b2e565b915050826060830152979650505050505050565b602081526000610bd86020830184610bdf565b600060208284031215610dd357600080fd5b81516001600160a01b0381168114610bd857600080fd5b60808152601a60808201527f726563656976655f6d6573736167655f776974685f746f6b656e00000000000060a082015260c060208201526000610c7260c0830160078152666d65737361676560c81b602082015260400190565b600060018060a01b03808a16835260e06020840152610e6760e084018a610bdf565b8381036040850152610e79818a610bdf565b90508381036060850152610e8d8189610bdf565b90508381036080850152610ea18188610bdf565b60a0850196909652509290921660c0909101525095945050505050565b60a081526000610ed160a0830188610bdf565b8281036020840152610ee38188610bdf565b90508281036040840152610ef78187610bdf565b90508281036060840152610f0b8186610bdf565b915050826080830152969550505050505056fea2646970667358221220056dfa9d01e0c29431c36496fb576c297dec49192378238d6241c301b6c01a6064736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}